import toml
import os
import sys

def load_secrets(config_path="secrets.toml"):
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Railway/–æ–±–ª–∞–∫–∞)
    openrouter_key = os.getenv("OPENROUTER_API_KEY")
    assemblyai_key = os.getenv("ASSEMBLYAI_API_KEY")
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if openrouter_key and assemblyai_key:
        return {
            "OPENROUTER_API_KEY": openrouter_key,
            "ASSEMBLYAI_API_KEY": assemblyai_key,
            "model_preference": os.getenv("MODEL_PREFERENCE", "anthropic/claude-3-5-sonnet-20241022"),
            "timeout": int(os.getenv("TIMEOUT", "180")),
            "max_retries": int(os.getenv("MAX_RETRIES", "3"))
        }
    
    # –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ secrets.toml (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if not os.path.exists(config_path):
        print(f"‚ùå –§–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª secrets.toml —Å –≤–∞—à–∏–º–∏ API-–∫–ª—é—á–∞–º–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        sys.exit(1)
    
    try:
        config = toml.load(config_path)
        api_keys = config.get("api_keys", {})
        
        return {
            "OPENROUTER_API_KEY": api_keys.get("OPENROUTER_API_KEY", config.get("OPENROUTER_API_KEY")),
            "ASSEMBLYAI_API_KEY": api_keys.get("ASSEMBLYAI_API_KEY", config.get("ASSEMBLYAI_API_KEY")),
            "model_preference": config.get("medical_analyzer", {}).get("model_preference"),
            "timeout": config.get("medical_analyzer", {}).get("timeout", 90),
            "max_retries": config.get("medical_analyzer", {}).get("max_retries", 2)
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {config_path}: {e}")
        sys.exit(1)

secrets = load_secrets()
OPENROUTER_API_KEY = secrets["OPENROUTER_API_KEY"]
ASSEMBLYAI_API_KEY = secrets["ASSEMBLYAI_API_KEY"]
