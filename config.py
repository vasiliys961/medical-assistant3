import toml
import os
import sys

def load_secrets(config_path="secrets.toml"):
    if not os.path.exists(config_path):
        print(f"‚ùå –§–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª secrets.toml —Å –≤–∞—à–∏–º–∏ API-–∫–ª—é—á–∞–º–∏.")
        print("–ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:")
        print("""
OPENROUTER_API_KEY = "–≤–∞—à_–∫–ª—é—á"
ASSEMBLYAI_API_KEY = "–≤–∞—à_–∫–ª—é—á"

[api_keys]
OPENROUTER_API_KEY = "–≤–∞—à_–∫–ª—é—á"
ASSEMBLYAI_API_KEY = "–≤–∞—à_–∫–ª—é—á"
        """)
        sys.exit(1)
    
    try:
        config = toml.load(config_path)
        api_keys = config.get("api_keys", {})
        
        return {
            "OPENROUTER_API_KEY": api_keys.get("OPENROUTER_API_KEY", config.get("OPENROUTER_API_KEY")),
            "ASSEMBLYAI_API_KEY": api_keys.get("ASSEMBLYAI_API_KEY", config.get("ASSEMBLYAI_API_KEY")),
            "model_preference": config.get("medical_analyzer", {}).get("model_preference"),
            "timeout": config.get("medical_analyzer", {}).get("timeout", 90),
            "max_retries": config.get("medical_analyzer", {}).get("max_retries", 2)
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {config_path}: {e}")
        sys.exit(1)

secrets = load_secrets()
OPENROUTER_API_KEY = secrets["OPENROUTER_API_KEY"]
ASSEMBLYAI_API_KEY = secrets["ASSEMBLYAI_API_KEY"]

# –í –∫–æ–Ω—Ü–µ config.py
if not OPENROUTER_API_KEY or OPENROUTER_API_KEY == "–≤–∞—à_–∫–ª—é—á":
    print("‚ö†Ô∏è OPENROUTER_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    
if not ASSEMBLYAI_API_KEY or ASSEMBLYAI_API_KEY == "–≤–∞—à_–∫–ª—é—á":
    print("‚ö†Ô∏è ASSEMBLYAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")

