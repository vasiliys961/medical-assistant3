from assemblyai_transcriber import transcribe_audio_assemblyai# app.py (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ—Å–ª–µ –∞–≤–∞—Ä–∏–∏)
from claude_assistant import OpenRouterAssistant
import streamlit as st
import io
import base64
import sqlite3
import pandas as pd
import numpy as np
from PIL import Image
import requests
import tempfile
import os
from io import BytesIO
import librosa
from modules.medical_ai_analyzer import EnhancedMedicalAIAnalyzer, ImageType
from modules.streamlit_enhanced_pages import (
    show_enhanced_analysis_page,
    show_comparative_analysis_page, 
    #show_ai_training_page,
    show_medical_protocols_page
)
from modules.advanced_lab_processor import AdvancedLabProcessor
import datetime

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ò–ò ---
try:
    from claude_assistant import OpenRouterAssistant
    AI_AVAILABLE = True
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    AI_AVAILABLE = False

# --- AssemblyAI –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ ---
try:
    from assemblyai_transcriber import transcribe_audio_assemblyai
    ASSEMBLYAI_AVAILABLE = True
except ImportError:
    ASSEMBLYAI_AVAILABLE = False

def transcribe_audio(audio_file):
    """–ó–∞–≥–ª—É—à–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ AssemblyAI"""
    return "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AssemblyAI –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect('medical_data.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
    cursor.execute("PRAGMA table_info(patients)")
    columns = [col[1] for col in cursor.fetchall()]
    if 'age' not in columns:
        cursor.execute("ALTER TABLE patients ADD COLUMN age INTEGER")
    if 'sex' not in columns:
        cursor.execute("ALTER TABLE patients ADD COLUMN sex TEXT")

    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS patients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            age INTEGER,
            sex TEXT,
            phone TEXT
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS patient_notes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            patient_id INTEGER,
            raw_text TEXT,
            structured_note TEXT,
            gdoc_url TEXT,
            diagnosis TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (patient_id) REFERENCES patients (id)
        )
    ''')

    conn.commit()
    conn.close()

# --- –°—Ç—Ä–∞–Ω–∏—Ü—ã ---
def show_home_page():
    st.markdown("# üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç v5.1")
    st.write("AssemblyAI + Vision + –ò–ò-–∞–Ω–∞–ª–∏–∑ + –ø—Ä–æ—Ç–æ–∫–æ–ª—ã")
    st.info("‚úÖ –ì–æ—Ç–æ–≤ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –≤–≤–æ–¥—É —á–µ—Ä–µ–∑ AssemblyAI –∏ —ç–∫—Å–ø–æ—Ä—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

    col1, col2, col3 = st.columns(3)
    with col1:
        st.subheader("üìà –≠–ö–ì")
        st.write("- –ß–°–°, —Ä–∏—Ç–º, –∞—Ä–∏—Ç–º–∏–∏")
    with col2:
        st.subheader("ü©ª –†–µ–Ω—Ç–≥–µ–Ω")
        st.write("- –ö–∞—á–µ—Å—Ç–≤–æ, –ø–∞—Ç–æ–ª–æ–≥–∏—è –ª—ë–≥–∫–∏—Ö")
    with col3:
        st.subheader("üß† –ú–†–¢")
        st.write("- –ö–∞—á–µ—Å—Ç–≤–æ, –∞–Ω–∞—Ç–æ–º–∏—è, –ø–∞—Ç–æ–ª–æ–≥–∏—è")

def show_ecg_analysis():
    if not AI_AVAILABLE:
        st.error("‚ùå –ò–ò-–º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª `claude_assistant.py` –∏ API-–∫–ª—é—á.")
        return

    st.header("üìà –ê–Ω–∞–ª–∏–∑ –≠–ö–ì")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≠–ö–ì (JPG, PNG, PDF, DICOM)", type=["jpg", "png", "pdf", "dcm"])

    if uploaded_file is None:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    try:
        image = Image.open(uploaded_file).convert("L")
        image_array = np.array(image)
        analysis = {
            "heart_rate": 75,
            "rhythm_assessment": "–°–∏–Ω—É—Å–æ–≤—ã–π",
            "num_beats": 12,
            "duration": 10,
            "signal_quality": "–•–æ—Ä–æ—à–µ–µ"
        }
        st.image(image_array, caption="–≠–ö–ì", use_container_width=True, clamp=True)

        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ß–°–°", f"{analysis['heart_rate']} —É–¥/–º–∏–Ω")
            st.metric("–†–∏—Ç–º", analysis['rhythm_assessment'])
        with col2:
            st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{analysis['duration']:.1f} —Å")
            st.metric("–ö–æ–º–ø–ª–µ–∫—Å—ã", analysis['num_beats'])

        assistant = OpenRouterAssistant()
        if st.button("üîç –ò–ò-–∞–Ω–∞–ª–∏–∑ –≠–ö–ì (—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º)"):
            with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≠–ö–ì..."):
                prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≠–ö–ì –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –û—Ü–µ–Ω–∏—Ç–µ —Ä–∏—Ç–º, –ß–°–°, –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏—à–µ–º–∏–∏, –±–ª–æ–∫–∞–¥, –∞—Ä–∏—Ç–º–∏–π."
                result = assistant.send_vision_request(prompt, image_array, str(analysis))
                st.markdown("### üß† –û—Ç–≤–µ—Ç –ò–ò:")
                st.write(result)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≠–ö–ì: {e}")

def show_xray_analysis():
    if not AI_AVAILABLE:
        st.error("‚ùå –ò–ò-–º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª `claude_assistant.py` –∏ API-–∫–ª—é—á.")
        return

    st.header("ü©ª –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω (JPG, PNG, DICOM)", type=["jpg", "png", "dcm"])

    if uploaded_file is None:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    try:
        image = Image.open(uploaded_file).convert("L")
        image_array = np.array(image)
        analysis = {
            "quality_assessment": "–•–æ—Ä–æ—à–µ–µ",
            "contrast": 45.0,
            "lung_area": 50000
        }
        st.image(image_array, caption="–†–µ–Ω—Ç–≥–µ–Ω", use_container_width=True, clamp=True)

        st.subheader("üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ö–∞—á–µ—Å—Ç–≤–æ", analysis['quality_assessment'])
            st.metric("–ö–æ–Ω—Ç—Ä–∞—Å—Ç", f"{analysis['contrast']:.1f}")
        with col2:
            st.metric("–ü–ª–æ—â–∞–¥—å –ª—ë–≥–∫–∏—Ö", f"{analysis['lung_area']:,}")

        assistant = OpenRouterAssistant()
        if st.button("ü©∫ –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞"):
            with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–Ω–∏–º–æ–∫..."):
                prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏. –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–∞—Ç–æ–ª–æ–≥–∏–∏."
                result = assistant.send_vision_request(prompt, image_array, str(analysis))
                st.markdown("### üß† –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:")
                st.write(result)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–Ω—Ç–≥–µ–Ω–∞: {e}")

def show_mri_analysis():
    if not AI_AVAILABLE:
        st.error("‚ùå –ò–ò-–º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª `claude_assistant.py` –∏ API-–∫–ª—é—á.")
        return

    st.header("üß† –ê–Ω–∞–ª–∏–∑ –ú–†–¢")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ú–†–¢ (DICOM, JPG, PNG)", type=["dcm", "jpg", "png"])

    if uploaded_file is None:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ DICOM-—Ñ–∞–π–ª –ú–†–¢ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    try:
        image = Image.open(uploaded_file).convert("L")
        image_array = np.array(image)
        mri_analysis = {
            "quality_assessment": "–•–æ—Ä–æ—à–µ–µ",
            "sharpness": 120.0,
            "noise_level": 20.0,
            "snr": 15.0,
            "artifacts": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"
        }
        st.image(image_array, caption="–ú–†–¢-—Å—Ä–µ–∑", use_container_width=True, clamp=True)

        st.subheader("üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ú–†–¢")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ö–∞—á–µ—Å—Ç–≤–æ", mri_analysis['quality_assessment'])
            st.metric("–†–µ–∑–∫–æ—Å—Ç—å", f"{mri_analysis['sharpness']:.1f}")
        with col2:
            st.metric("–®—É–º", f"{mri_analysis['noise_level']:.1f}")
            st.metric("SNR", f"{mri_analysis['snr']:.2f}")

        st.caption(f"–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {mri_analysis['artifacts']}")

        assistant = OpenRouterAssistant()
        if st.button("üß† –ò–ò-–∞–Ω–∞–ª–∏–∑ –ú–†–¢ (—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º)"):
            with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ú–†–¢..."):
                prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ú–†–¢-—Å—Ä–µ–∑ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∞–Ω–∞—Ç–æ–º–∏—é, –∫–∞—á–µ—Å—Ç–≤–æ, –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–∞—Ç–æ–ª–æ–≥–∏–∏."
                result = assistant.send_vision_request(prompt, image_array, str(mri_analysis))
                st.markdown("### üß† –ù–µ–π—Ä–æ—Ä–∞–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:")
                st.write(result)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ú–†–¢: {e}")

# --- –°—Ç—Ä–∞–Ω–∏—Ü–∞: –ü—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–∏—ë–º–∞ ---
def show_consultation_protocol():
    from local_docs import create_local_doc
    
    if not AI_AVAILABLE:
        st.error("‚ùå –ò–ò-–º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª `claude_assistant.py` –∏ API-–∫–ª—é—á.")
        return

    st.header("üìù –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–∏—ë–º–∞")

    init_db()
    conn = sqlite3.connect('medical_data.db')
    patients = pd.read_sql_query("SELECT id, name FROM patients", conn)
    conn.close()

    if patients.empty:
        st.warning("‚ùå –ë–∞–∑–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'.")
        return

    selected_patient = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞", patients['name'])
    patient_id = patients[patients['name'] == selected_patient].iloc[0]['id']

    st.subheader("üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ —á–µ—Ä–µ–∑ AssemblyAI")
    audio = st.audio_input("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ (–¥–æ 30 –º–∏–Ω)")

    if not ASSEMBLYAI_AVAILABLE:
        st.error("‚ùå AssemblyAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª assemblyai_transcriber.py")

    if audio and st.button("üé§ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ"):
        if ASSEMBLYAI_AVAILABLE:
            with st.spinner("üîÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ AssemblyAI..."):
                try:
                    api_key = st.secrets["ASSEMBLYAI_API_KEY"]
                    raw_text = transcribe_audio_assemblyai(audio, api_key)
                    st.session_state.raw_text = raw_text
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ AssemblyAI: {e}")
                    return
        else:
            st.error("‚ùå AssemblyAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        st.subheader("üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        st.text_area("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", value=raw_text, height=150, disabled=True)

        with st.spinner("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞..."):
            assistant = OpenRouterAssistant()
            prompt = f"""
–¢—ã ‚Äî –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã –∏ –≤–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤
—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–µ. –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª:
–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–≥—É—é, –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏
–ø—Ä–∏–º–µ–Ω–∏–º—É—é –∫–ª–∏–Ω–∏—á–µ—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–∏–≤—É –¥–ª—è –≤—Ä–∞—á–∞, –≥–æ—Ç–æ–≤—É—é –∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤
—Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ.

**–ñ–∞–ª–æ–±—ã:**
- ...

**–ê–Ω–∞–º–Ω–µ–∑ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:**
- ...

**–ê–Ω–∞–º–Ω–µ–∑ –∂–∏–∑–Ω–∏:**
- ...

**–û–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –æ—Å–º–æ—Ç—Ä:**
- –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ª–∏–º—Ñ–æ—É–∑–ª—ã: –ö–æ–∂–∞: –°–ª–∏–∑–∏—Å—Ç—ã–µ: –ü—É–ª—å—Å: –ê–î: –ß–î–î:
- –°–µ—Ä–¥—Ü–µ: –õ—ë–≥–∫–∏–µ: –ñ–∏–≤–æ—Ç: –ü–µ—á–µ–Ω—å, —Å–µ–ª–µ–∑—ë–Ω–∫–∞: –ø–æ—á–∫–∏: —Å—Ç—É–ª: –¥–∏—É—Ä–µ–∑: –æ—Ç—ë–∫–∏:
- –ù–µ–≤—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å: (–æ—Å—Ç–∞–≤—å—Ç–µ "–±–µ–∑ –ø–∞—Ç–æ–ª–æ–≥–∏–∏" –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)

**–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑:**
- ...

**–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:**
- ...

**–¢–µ—Ä–∞–ø–∏—è:**
- —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É, –¥–∏–µ—Ç–µ
- —Ñ–∞—Ä–º–∞–∫–æ—Ç–µ—Ä–∞–ø–∏—è: –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∂–µ–ª–∞–µ–º—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ª–µ—á–µ–Ω–∏—è, –ø–æ—Ç–æ–º —É–∫–∞–∂–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –¥–æ–∑—É, –∞ –≤ —Å–∫–æ–±–∫–∞—Ö ‚Äî 2 –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –≥–µ–Ω–µ—Ä–∏–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º...
- –ø—Ä–µ–¥–ª–æ–∂–∏ —Ñ–∏–∑–∏–æ–ª–µ—á–µ–Ω–∏–µ, 1-2 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞, –Ω–µ —É–∫–∞–∑—ã–≤–∞–π —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω—ã

–¢–µ–∫—Å—Ç: {raw_text}

–ü—Ä–∞–≤–∏–ª–∞:
- –û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ñ–∞–ª–æ–±—ã –ø–µ—Ä–µ—á–∏—Å–ª—è–π —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ–º –≤ –¥–∏–Ω–∞–º–∏–∫–µ. –ù–µ –ø–µ—Ä–µ–Ω–æ—Å–∏ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–π. –ü–µ—Ä–µ–Ω–æ—Å—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è.
- –ï—Å–ª–∏ –ø—É–Ω–∫—Ç –Ω–µ —É–ø–æ–º—è–Ω—É—Ç ‚Äî –ø–æ—Å—Ç–∞–≤—å—Ç–µ "–±–µ–∑ –ø–∞—Ç–æ–ª–æ–≥–∏–∏" –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö.
- –î–∏–∞–≥–Ω–æ–∑ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π.
"""
            structured_note = assistant.get_response(prompt)
            st.session_state.structured_note = structured_note

        with st.spinner("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞..."):
            filepath, message = create_local_doc(f"–ü—Ä–æ—Ç–æ–∫–æ–ª ‚Äî {selected_patient}", structured_note)
            st.success(message)
            with open(filepath, "rb") as f:
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª (.docx)",
                    data=f,
                    file_name=os.path.basename(filepath),
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )

        st.subheader("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª")
        st.write(structured_note)

def show_patient_database():
    st.header("üë§ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
    init_db()

    tab1, tab2 = st.tabs(["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üîç –ü–æ–∏—Å–∫"])

    with tab1:
        st.subheader("–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        with st.form("add_patient"):
            name = st.text_input("–§–ò–û")
            age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=0, max_value=150)
            sex = st.selectbox("–ü–æ–ª", ["–ú", "–ñ"])
            phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω")
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")

            if submitted and name:
                conn = sqlite3.connect('medical_data.db')
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO patients (name, age, sex, phone)
                    VALUES (?, ?, ?, ?)
                ''', (name, age, sex, phone))
                conn.commit()
                conn.close()
                st.success(f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç {name} –¥–æ–±–∞–≤–ª–µ–Ω!")
                st.rerun()

    with tab2:
        st.subheader("–ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
        conn = sqlite3.connect('medical_data.db')
        df = pd.read_sql_query("SELECT * FROM patients", conn)
        conn.close()

        if not df.empty:
            st.dataframe(df, use_container_width=True)
        else:
            st.info("–ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def show_ai_chat():
    if not AI_AVAILABLE:
        st.error("‚ùå –ò–ò-–º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª `claude_assistant.py` –∏ API-–∫–ª—é—á.")
        return

    st.header("ü§ñ –ò–ò-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")

    try:
        assistant = OpenRouterAssistant()
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîó –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"):
                with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞..."):
                    success, msg = assistant.test_connection()
                    if success:
                        st.success(msg)
                    else:
                        st.error(msg)
        with col2:
            st.info("üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Claude 3.5 Sonnet")

        if 'chat_history' not in st.session_state:
            st.session_state.chat_history = []

        for msg in st.session_state.chat_history:
            st.chat_message("user").write(msg['user'])
            st.chat_message("assistant").write(msg['assistant'])

        user_input = st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å...")
        if user_input:
            st.chat_message("user").write(user_input)
            with st.spinner("–ò–ò –¥—É–º–∞–µ—Ç..."):
                response = assistant.general_medical_consultation(user_input)
            st.chat_message("assistant").write(response)
            st.session_state.chat_history.append({
                'user': user_input,
                'assistant': response
            })
            if len(st.session_state.chat_history) > 50:
                st.session_state.chat_history = st.session_state.chat_history[-50:]

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {e}")

def show_clinical_recommendations(diagnosis):
    """–ü—Ä–æ—Å—Ç—ã–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑ API"""
    st.markdown("### üìö –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    recommendations = {
        "–ø–Ω–µ–≤–º–æ–Ω–∏—è": {
            "icd10": "J18.9",
            "treatment": ["–ê–º–æ–∫—Å–∏—Ü–∏–ª–ª–∏–Ω 500–º–≥ 3—Ä/–¥–µ–Ω—å", "–ü–æ–∫–æ–π", "–û–±–∏–ª—å–Ω–æ–µ –ø–∏—Ç—å–µ"],
            "diagnostics": ["–†–µ–Ω—Ç–≥–µ–Ω –û–ì–ö", "–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏", "–ü–æ—Å–µ–≤ –º–æ–∫—Ä–æ—Ç—ã"]
        },
        "–∏–Ω—Ñ–∞—Ä–∫—Ç": {
            "icd10": "I21.9",
            "treatment": ["–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –≥–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è", "–ê—Å–ø–∏—Ä–∏–Ω 300–º–≥", "–¢—Ä–æ–º–±–æ–ª–∏–∑–∏—Å"],
            "diagnostics": ["–≠–ö–ì-12", "–¢—Ä–æ–ø–æ–Ω–∏–Ω—ã", "–≠—Ö–æ–ö–ì"]
        },
        "—Ä–µ–Ω—Ç–≥–µ–Ω": {
            "icd10": "Z01.6",
            "treatment": ["–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º"],
            "diagnostics": ["–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", "–ü–æ–∏—Å–∫ –ø–∞—Ç–æ–ª–æ–≥–∏–π"]
        }
    }
    
    if diagnosis in recommendations:
        rec = recommendations[diagnosis]
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
            for item in rec["diagnostics"]:
                st.markdown(f"- {item}")
        
        with col2:
            st.markdown("#### üíä –õ–µ—á–µ–Ω–∏–µ")
            for item in rec["treatment"]:
                st.markdown(f"- {item}")
        
        st.markdown(f"**–ö–æ–¥ –ø–æ –ú–ö–ë-10:** `{rec['icd10']}`")
    else:
        st.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def show_lab_analysis():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    st.header("üî¨ –ê–Ω–∞–ª–∏–∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    if 'lab_processor' not in st.session_state:
        st.session_state.lab_processor = AdvancedLabProcessor()
    
    processor = st.session_state.lab_processor
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    col1, col2 = st.columns(2)
    with col1:
        auto_detect_type = st.checkbox("–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞", value=True)
    with col2:
        show_raw_data = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", value=False)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
    type=["pdf", "xlsx", "xls", "csv", "json", "xml", "jpg", "jpeg", "png"],  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, Excel, CSV, JSON, XML, JPG, PNG"
)
    
    if uploaded_file and st.button("üß™ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."):
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix=f".{uploaded_file.name.split('.')[-1]}") as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_path = tmp_file.name
            
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞
                lab_report = processor.process_file(tmp_path, ai_assistant=OpenRouterAssistant())
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if lab_report.parameters:
                    st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(lab_report.parameters)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                    
                    # –ú–µ—Ç—Ä–∏–∫–∏
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("–ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", len(lab_report.parameters))
                    with col2:
                        st.metric("–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å", f"{lab_report.confidence:.1%}")
                    with col3:
                        critical_count = len(lab_report.critical_values)
                        st.metric("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö", critical_count, delta="‚ö†Ô∏è" if critical_count > 0 else None)
                    with col4:
                        normal_count = len([p for p in lab_report.parameters if p.status == "normal"])
                        st.metric("–í –Ω–æ—Ä–º–µ", f"{normal_count}/{len(lab_report.parameters)}")
                    
                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    if lab_report.critical_values:
                        st.error("üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–ù–ê–ß–ï–ù–ò–Ø:**")
                        for critical in lab_report.critical_values:
                            st.error(f"‚Ä¢ {critical}")
                    
                    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    if lab_report.warnings:
                        st.warning("‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**")
                        for warning in lab_report.warnings:
                            st.warning(f"‚Ä¢ {warning}")
                    
                    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤")
                    df = processor.to_dataframe(lab_report)
                    
                    # –¶–≤–µ—Ç–æ–≤–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
                    def style_status(val):
                        colors = {
                            'normal': 'background-color: #d4edda',
                            'high': 'background-color: #fff3cd', 
                            'low': 'background-color: #fff3cd',
                            'critical_high': 'background-color: #f8d7da',
                            'critical_low': 'background-color: #f8d7da'
                        }
                        return colors.get(val, '')
                    
                    styled_df = df.style.applymap(style_status, subset=['–°—Ç–∞—Ç—É—Å'])
                    st.dataframe(styled_df, use_container_width=True)
                    
                    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    st.subheader("üìã –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏—Å—Ç–µ–º–∞–º")
                    summary = processor.generate_summary(lab_report)
                    
                    for category, params in summary['categories'].items():
                        with st.expander(f"üìÅ {category.title()} ({len(params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)"):
                            for param in params:
                                status_emoji = {
                                    'normal': '‚úÖ',
                                    'high': '‚¨ÜÔ∏è', 
                                    'low': '‚¨áÔ∏è',
                                    'critical_high': 'üî¥',
                                    'critical_low': 'üî¥'
                                }.get(param['status'], '‚ùì')
                                
                                st.markdown(f"{status_emoji} **{param['name']}:** {param['value']} {param['unit']} ({param['status']})")
                    
                    # –ò–ò-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
                    if st.button("ü§ñ –ò–ò-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"):
                        with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã..."):
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
                            context = f"""
–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(lab_report.parameters)}
–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {lab_report.confidence:.1%}

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
"""
                            for param in lab_report.parameters:
                                context += f"- {param.name}: {param.value} {param.unit} (–Ω–æ—Ä–º–∞: {param.reference_range}, —Å—Ç–∞—Ç—É—Å: {param.status})\n"
                            
                            if lab_report.critical_values:
                                context += f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: {'; '.join(lab_report.critical_values)}"
                            
                            # –ó–∞–ø—Ä–æ—Å –∫ –ò–ò (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç)
                            try:
                                assistant = OpenRouterAssistant()
                                interpretation = assistant.get_response(
                                    "–ü—Ä–æ–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –î–∞–π—Ç–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
                                    context
                                )
                                
                                st.subheader("üß† –ò–ò-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è")
                                st.write(interpretation)
                                
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞: {e}")
                    
                    # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if show_raw_data:
                        st.subheader("üìÑ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                        st.text_area("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", lab_report.raw_text, height=200)
                    
                    # –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    csv_data = df.to_csv(index=False, encoding='utf-8')
                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (CSV)",
                        data=csv_data,
                        file_name=f"lab_results_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                        mime="text/csv"
                    )
                
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞")
                    if show_raw_data:
                        st.text_area("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏", lab_report.raw_text, height=200)
            
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.unlink(tmp_path)
                except:
                    pass

def show_genetic_analysis_page():
    st.header("üß¨ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª", type=["txt", "csv"])
    
    col1, col2 = st.columns(2)
    with col1:
        age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", 1, 120, 30)
        gender = st.selectbox("–ü–æ–ª", ["–ú", "–ñ"])
    with col2:
        lifestyle = st.selectbox("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", ["–ù–∏–∑–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–í—ã—Å–æ–∫–∞—è"])
    
    if uploaded_file and st.button("üß¨ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
        st.success("‚úÖ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        st.info("üìä –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    st.set_page_config(
        page_title="–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç",
        page_icon="üè•",
        layout="wide"
    )

    init_db()

    # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
    pages = [
        "üè† –ì–ª–∞–≤–Ω–∞—è",
        "üìà –ê–Ω–∞–ª–∏–∑ –≠–ö–ì",
        "ü©ª –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞",
        "üß† –ê–Ω–∞–ª–∏–∑ –ú–†–¢",
        "üî¨ –ê–Ω–∞–ª–∏–∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",     # ‚Üê —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        "üìù –ü—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–∏—ë–º–∞",
        "üë§ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤",
        "ü§ñ –ò–ò-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
        "üß¨ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
        # === –ù–û–í–´–ï –°–¢–†–ê–ù–ò–¶–´ ===
        "üî¨ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑",          # ‚Üê –ù–û–í–û–ï
        "üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",           # ‚Üê –ù–û–í–û–ï
        "üìö –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã",          # ‚Üê –ù–û–í–û–ï
        #"üéì –û–±—É—á–µ–Ω–∏–µ –ò–ò",                   # ‚Üê –ù–û–í–û–ï
    ]

    st.sidebar.title("üß† –ú–µ–Ω—é")
    page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", pages)

    # === –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–†–ê–ù–ò–¶ ===
    if page == "üè† –ì–ª–∞–≤–Ω–∞—è":
        show_home_page()
    elif page == "üìà –ê–Ω–∞–ª–∏–∑ –≠–ö–ì":
        show_ecg_analysis()
    elif page == "ü©ª –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞":
        show_xray_analysis()
    elif page == "üß† –ê–Ω–∞–ª–∏–∑ –ú–†–¢":
        show_mri_analysis()
    elif page == "üî¨ –ê–Ω–∞–ª–∏–∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö":
        show_lab_analysis()  # ‚Üê –≤–∞—à–∞ –Ω–æ–≤–∞—è —É–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    elif page == "üìù –ü—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–∏—ë–º–∞":
        show_consultation_protocol()
    elif page == "üë§ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤":
        show_patient_database()
    elif page == "ü§ñ –ò–ò-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç":
        show_ai_chat()
    elif page == "üß¨ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑":
        show_genetic_analysis_page()  # ‚Üê –≤–∞—à–∞ –≥–æ—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    
    # === –ù–û–í–´–ï –°–¢–†–ê–ù–ò–¶–´ ===
    elif page == "üî¨ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑":
        show_enhanced_analysis_page()
    elif page == "üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        show_comparative_analysis_page()
    elif page == "üìö –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã":
        show_medical_protocols_page()
    #"elif page == "üéì –û–±—É—á–µ–Ω–∏–µ –ò–ò":
#       show_ai_training_page()
    
    # === –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–ê–ô–î–ë–ê–† ===
    st.sidebar.markdown("---")
    st.sidebar.info("""
    **–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç v6.0** üÜï
    üîπ AssemblyAI –¥–ª—è –≥–æ–ª–æ—Å–∞
    üîπ 10 —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    üîπ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    üîπ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON –∞–Ω–∞–ª–∏–∑
    üîπ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    üîπ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
    üîπ Claude 3.5 Sonnet + OpenRouter
    ‚ö†Ô∏è –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    """)

if __name__ == "__main__":
    main()