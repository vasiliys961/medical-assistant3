#–¥–æ –∫–≤–µ–Ω–∞ 
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å Streamlit
–ù–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
"""

import streamlit as st
import numpy as np
from PIL import Image
import pandas as pd
import json
import plotly.graph_objects as go
import plotly.express as px
from typing import Dict, List, Optional
import io
import base64
from .medical_ai_analyzer import EnhancedMedicalAIAnalyzer, ImageType, AnalysisResult


def show_enhanced_analysis_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞"""
    st.header("üî¨ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ò–ò-–ê–Ω–∞–ª–∏–∑")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    if 'enhanced_analyzer' not in st.session_state:
        api_key = "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"
        st.session_state.enhanced_analyzer = EnhancedMedicalAIAnalyzer(api_key)
    
    analyzer = st.session_state.enhanced_analyzer
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        auto_detect = st.checkbox("–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞", value=True)
        if not auto_detect:
            selected_type = st.selectbox(
                "–¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                options=[t.value for t in ImageType],
                format_func=lambda x: {
                    'ecg': 'üìà –≠–ö–ì',
                    'xray': 'ü©ª –†–µ–Ω—Ç–≥–µ–Ω',
                    'mri': 'üß† –ú–†–¢',
                    'ct': 'üîç –ö–¢',
                    'ultrasound': 'üì° –£–ó–ò',
                    'endoscopy': 'üî¨ –≠–Ω–¥–æ—Å–∫–æ–ø–∏—è',
                    'dermatoscopy': 'üîç –î–µ—Ä–º–∞—Ç–æ—Å–∫–æ–ø–∏—è',
                    'histology': 'üß¨ –ì–∏—Å—Ç–æ–ª–æ–≥–∏—è',
                    'retinal': 'üëÅÔ∏è –ì–ª–∞–∑–Ω–æ–µ –¥–Ω–æ',
                    'mammography': 'üéóÔ∏è –ú–∞–º–º–æ–≥—Ä–∞—Ñ–∏—è'
                }.get(x, x)
            )
    
    with col2:
        preprocessing = st.checkbox("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", value=True)
        batch_mode = st.checkbox("–ü–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º", value=False)
    
    with col3:
        confidence_threshold = st.slider("–ü–æ—Ä–æ–≥ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏", 0.0, 1.0, 0.7, 0.1)
        show_metadata = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", value=False)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    if batch_mode:
        uploaded_files = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            type=["jpg", "jpeg", "png", "dcm", "tiff"],
            accept_multiple_files=True
        )
    else:
        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            type=["jpg", "jpeg", "png", "dcm", "tiff"]
        )
        uploaded_files = [uploaded_file] if uploaded_file else []
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    additional_context = st.text_area(
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–º–Ω–µ–∑, –∂–∞–ª–æ–±—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑..."
    )
    
    if uploaded_files and st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"):
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_data = []
        
        for uploaded_file in uploaded_files:
            if uploaded_file is not None:
                try:
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image = Image.open(uploaded_file)
                    if image.mode != 'RGB' and image.mode != 'L':
                        image = image.convert('RGB')
                    
                    image_array = np.array(image)
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
                    if auto_detect:
                        image_type = None
                    else:
                        image_type = ImageType(selected_type)
                    
                    images_data.append((image_array, image_type, uploaded_file.name))
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {uploaded_file.name}: {e}")
        
        if images_data:
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            results = []
            
            for i, (image_array, image_type, filename) in enumerate(images_data):
                status_text.text(f"–ê–Ω–∞–ª–∏–∑ {filename}...")
                progress_bar.progress((i + 1) / len(images_data))
                
                try:
                    result = analyzer.analyze_image(
                        image_array, 
                        image_type, 
                        additional_context
                    )
                    result.filename = filename
                    results.append(result)
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {filename}: {e}")
            
            progress_bar.empty()
            status_text.empty()
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if results:
                st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(results)}")
                
                # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                show_analysis_summary(results, confidence_threshold)
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for result in results:
                    show_detailed_analysis_result(result, show_metadata)
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
                if st.button("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç"):
                    report = analyzer.generate_report(results)
                    
                    st.subheader("üìã –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç")
                    st.text_area("–û—Ç—á–µ—Ç", report, height=400)
                    
                    # –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (.txt)",
                        data=report,
                        file_name=f"medical_report_{len(results)}_images.txt",
                        mime="text/plain"
                    )


def show_analysis_summary(results: List[AnalysisResult], confidence_threshold: float):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞"""
    
    st.subheader("üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_images = len(results)
        st.metric("–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", total_images)
    
    with col2:
        high_confidence = len([r for r in results if r.confidence >= confidence_threshold])
        st.metric("–í—ã—Å–æ–∫–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å", f"{high_confidence}/{total_images}")
    
    with col3:
        urgent_cases = len([r for r in results if r.urgent_flags])
        st.metric("–°—Ä–æ—á–Ω—ã–µ —Å–ª—É—á–∞–∏", urgent_cases, delta="‚ö†Ô∏è" if urgent_cases > 0 else None)
    
    with col4:
        avg_confidence = np.mean([r.confidence for r in results])
        st.metric("–°—Ä–µ–¥–Ω—è—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å", f"{avg_confidence:.1%}")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    col1, col2 = st.columns(2)
    
    with col1:
        type_counts = {}
        for result in results:
            type_name = result.image_type.value
            type_counts[type_name] = type_counts.get(type_name, 0) + 1
        
        if type_counts:
            fig_pie = px.pie(
                values=list(type_counts.values()),
                names=list(type_counts.keys()),
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
            )
            st.plotly_chart(fig_pie, use_container_width=True)
    
    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏
        confidence_data = pd.DataFrame({
            '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': [getattr(r, 'filename', f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}') for i, r in enumerate(results)],
            '–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å': [r.confidence for r in results],
            '–¢–∏–ø': [r.image_type.value for r in results]
        })
        
        fig_bar = px.bar(
            confidence_data,
            x='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            y='–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å',
            color='–¢–∏–ø',
            title="–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º"
        )
        fig_bar.add_hline(y=confidence_threshold, line_dash="dash", line_color="red", 
                         annotation_text="–ü–æ—Ä–æ–≥ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏")
        st.plotly_chart(fig_bar, use_container_width=True)


def show_detailed_analysis_result(result: AnalysisResult, show_metadata: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    
    filename = getattr(result, 'filename', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    
    with st.expander(f"üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {filename}", expanded=True):
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", result.image_type.value.upper())
        with col2:
            confidence_color = "green" if result.confidence > 0.8 else "orange" if result.confidence > 0.6 else "red"
            st.markdown(f"**–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å:** :{confidence_color}[{result.confidence:.1%}]")
        with col3:
            if result.urgent_flags:
                st.error(f"‚ö†Ô∏è –°—Ä–æ—á–Ω–æ: {len(result.urgent_flags)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
            else:
                st.success("‚úÖ –ü–ª–∞–Ω–æ–≤–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏
        if result.structured_findings:
            findings = result.structured_findings
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞
            if "technical_assessment" in findings:
                st.subheader("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞")
                tech = findings["technical_assessment"]
                
                col1, col2 = st.columns(2)
                with col1:
                    quality = tech.get("quality", "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
                    quality_color = {"–æ—Ç–ª–∏—á–Ω–æ–µ": "green", "—Ö–æ—Ä–æ—à–µ–µ": "green", 
                                   "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ": "orange", "–ø–ª–æ—Ö–æ–µ": "red"}.get(quality, "gray")
                    st.markdown(f"**–ö–∞—á–µ—Å—Ç–≤–æ:** :{quality_color}[{quality}]")
                
                with col2:
                    artifacts = tech.get("artifacts", [])
                    if artifacts:
                        st.warning(f"–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {', '.join(artifacts)}")
                    else:
                        st.success("–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            
            # –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ö–æ–¥–∫–∏
            if "clinical_findings" in findings:
                st.subheader("üè• –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ö–æ–¥–∫–∏")
                clinical = findings["clinical_findings"]
                
                # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                normal = clinical.get("normal_structures", [])
                if normal:
                    st.success(f"**–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:** {', '.join(normal)}")
                
                # –ü–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ö–æ–¥–∫–∏
                pathological = clinical.get("pathological_findings", [])
                if pathological:
                    st.warning("**–ü–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**")
                    for finding in pathological:
                        with st.container():
                            st.markdown(f"‚Ä¢ **{finding.get('finding', '–ù–∞—Ö–æ–¥–∫–∞')}**")
                            if finding.get('location'):
                                st.markdown(f"  üìç –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è: {finding['location']}")
                            if finding.get('severity'):
                                st.markdown(f"  üìä –í—ã—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å: {finding['severity']}")
                            if finding.get('description'):
                                st.markdown(f"  üìù –û–ø–∏—Å–∞–Ω–∏–µ: {finding['description']}")
                else:
                    st.success("–ü–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ")
            
            # –î–∏–∞–≥–Ω–æ–∑
            if "diagnosis" in findings:
                st.subheader("üéØ –î–∏–∞–≥–Ω–æ–∑")
                diagnosis = findings["diagnosis"]
                
                primary = diagnosis.get("primary_diagnosis", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                st.markdown(f"**–û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ–∑:** {primary}")
                
                differential = diagnosis.get("differential_diagnosis", [])
                if differential:
                    st.markdown("**–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:**")
                    for diff_diag in differential:
                        st.markdown(f"‚Ä¢ {diff_diag}")
                
                icd10 = diagnosis.get("icd10_codes", [])
                if icd10:
                    st.info(f"**–ö–æ–¥—ã –ú–ö–ë-10:** {', '.join(icd10)}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if "recommendations" in findings:
                st.subheader("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                recommendations = findings["recommendations"]
                
                urgent = recommendations.get("urgent_actions", [])
                if urgent:
                    st.error("**‚ö†Ô∏è –°—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**")
                    for action in urgent:
                        st.markdown(f"‚Ä¢ {action}")
                
                follow_up = recommendations.get("follow_up", [])
                if follow_up:
                    st.info("**üìÖ –ü–ª–∞–Ω –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:**")
                    for plan in follow_up:
                        st.markdown(f"‚Ä¢ {plan}")
                
                additional = recommendations.get("additional_studies", [])
                if additional:
                    st.info("**üî¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:**")
                    for study in additional:
                        st.markdown(f"‚Ä¢ {study}")
            
            # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
            if "risk_assessment" in findings:
                st.subheader("‚ö° –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞")
                risk = findings["risk_assessment"]
                
                urgency = risk.get("urgency_level", "–ø–ª–∞–Ω–æ–≤–æ")
                urgency_color = {"—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ": "red", "—Å—Ä–æ—á–Ω–æ": "orange", "–ø–ª–∞–Ω–æ–≤–æ": "green"}.get(urgency, "gray")
                st.markdown(f"**–£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏:** :{urgency_color}[{urgency}]")
                
                risk_factors = risk.get("risk_factors", [])
                if risk_factors:
                    st.warning(f"**–§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:** {', '.join(risk_factors)}")
                
                prognosis = risk.get("prognosis", "")
                if prognosis:
                    st.info(f"**–ü—Ä–æ–≥–Ω–æ–∑:** {prognosis}")
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if show_metadata and hasattr(result, 'metadata') and result.metadata:
            st.subheader("üîç –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            metadata_df = pd.DataFrame([
                {"–ü–∞—Ä–∞–º–µ—Ç—Ä": k, "–ó–Ω–∞—á–µ–Ω–∏–µ": str(v)} 
                for k, v in result.metadata.items()
            ])
            st.dataframe(metadata_df, use_container_width=True)


def show_comparative_analysis_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    st.header("üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    st.info("üí° –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏ –∏–ª–∏ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ü–∏–π")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    comparison_type = st.selectbox(
        "–¢–∏–ø —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
        ["–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞", "–†–∞–∑–Ω—ã–µ –ø—Ä–æ–µ–∫—Ü–∏–∏", "–î–æ/–ø–æ—Å–ª–µ –ª–µ—á–µ–Ω–∏—è", "–ú–µ–∂–ø–∞—Ü–∏–µ–Ω—Ç–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"]
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    col1, col2 = st.columns(2)
    with col1:
        force_same_type = st.checkbox("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–∏–ø", value=True, 
                                     help="–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–¥–∏–Ω —Ç–∏–ø")
    with col2:
        show_debug_info = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", value=False)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
        type=["jpg", "jpeg", "png", "dcm"],
        accept_multiple_files=True,
        help="–û–ø—Ç–∏–º–∞–ª—å–Ω–æ 2-4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞"
    )
    
    if uploaded_files and len(uploaded_files) >= 2:
        
        st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        st.subheader("üì∏ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
        preview_cols = st.columns(min(len(uploaded_files), 4))
        
        for i, uploaded_file in enumerate(uploaded_files):
            with preview_cols[i % len(preview_cols)]:
                try:
                    image = Image.open(uploaded_file)
                    st.image(image, caption=uploaded_file.name, use_container_width=True)
                    st.caption(f"–†–∞–∑–º–µ—Ä: {image.size[0]}√ó{image.size[1]}")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {uploaded_file.name}: {e}")
        
        if st.button("üîÑ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"):
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            if 'enhanced_analyzer' not in st.session_state:
                api_key = "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"
                st.session_state.enhanced_analyzer = EnhancedMedicalAIAnalyzer(api_key)
            
            analyzer = st.session_state.enhanced_analyzer
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            results = []
            images = []
            detected_types = []
            
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            for i, uploaded_file in enumerate(uploaded_files):
                status_text.text(f"–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}/{len(uploaded_files)}: {uploaded_file.name}")
                progress_bar.progress((i + 1) / len(uploaded_files))
                
                try:
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image = Image.open(uploaded_file)
                    if image.mode not in ['RGB', 'L']:
                        image = image.convert('RGB')
                    
                    image_array = np.array(image)
                    images.append(image_array)
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    detected_type, type_confidence = analyzer.detect_image_type(image_array)
                    detected_types.append((detected_type, type_confidence))
                    
                    if show_debug_info:
                        st.write(f"üîç {uploaded_file.name}: {detected_type.value} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {type_confidence:.1%})")
                    
                    # –ê–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    if force_same_type and i > 0:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
                        analysis_type = detected_types[0][0]
                    else:
                        analysis_type = detected_type
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                    result = analyzer.analyze_image(
                        image_array,
                        analysis_type,
                        additional_context=f"–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ({comparison_type}), –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1} –∏–∑ {len(uploaded_files)}"
                    )
                    result.filename = uploaded_file.name
                    result.detected_type = detected_type
                    result.type_confidence = type_confidence
                    results.append(result)
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {uploaded_file.name}: {e}")
                    continue
            
            progress_bar.empty()
            status_text.empty()
            
            if results:
                st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(results)}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤
                unique_types = list(set([r.detected_type.value for r in results]))
                if len(unique_types) > 1 and not force_same_type:
                    st.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {', '.join(unique_types)}")
                    st.info("üí° –í–∫–ª—é—á–∏—Ç–µ '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–∏–ø' –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
                st.subheader("üñºÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
                
                # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                num_cols = min(len(results), 3)
                cols = st.columns(num_cols)
                
                for i, (image_array, result) in enumerate(zip(images, results)):
                    with cols[i % num_cols]:
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        st.image(image_array, caption=result.filename, use_container_width=True)
                        
                        # –ú–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
                        st.metric("–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å", f"{result.confidence:.1%}")
                        
                        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø
                        type_emoji = {
                            'ecg': 'üìà', 'xray': 'ü©ª', 'mri': 'üß†', 'ct': 'üîç',
                            'ultrasound': 'üì°', 'endoscopy': 'üî¨', 'dermatoscopy': 'üîç',
                            'histology': 'üß¨', 'retinal': 'üëÅÔ∏è', 'mammography': 'üéóÔ∏è'
                        }
                        emoji = type_emoji.get(result.detected_type.value, 'üìÑ')
                        st.caption(f"{emoji} {result.detected_type.value} ({result.type_confidence:.1%})")
                        
                        # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        if show_debug_info:
                            st.caption(f"–†–∞–∑–º–µ—Ä: {image_array.shape}")
                
                # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                st.subheader("üìã –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
                
                comparison_data = []
                for result in results:
                    findings = result.structured_findings
                    
                    comparison_data.append({
                        "–§–∞–π–ª": result.filename,
                        "–¢–∏–ø": result.detected_type.value,
                        "–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å": f"{result.confidence:.1%}",
                        "–û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ–∑": findings.get("diagnosis", {}).get("primary_diagnosis", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"),
                        "–ö–∞—á–µ—Å—Ç–≤–æ": findings.get("technical_assessment", {}).get("quality", "–ù–µ –æ—Ü–µ–Ω–µ–Ω–æ"),
                        "–°—Ä–æ—á–Ω–æ—Å—Ç—å": findings.get("risk_assessment", {}).get("urgency_level", "–ø–ª–∞–Ω–æ–≤–æ"),
                        "–ü–∞—Ç–æ–ª–æ–≥–∏—è": "–î–∞" if findings.get("clinical_findings", {}).get("pathological_findings") else "–ù–µ—Ç"
                    })
                
                comparison_df = pd.DataFrame(comparison_data)
                st.dataframe(comparison_df, use_container_width=True)
                
                # –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
                if comparison_type == "–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞":
                    st.subheader("üìà –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏")
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏
                    confidence_trend = [r.confidence for r in results]
                    
                    fig = go.Figure()
                    fig.add_trace(go.Scatter(
                        x=list(range(1, len(confidence_trend) + 1)),
                        y=confidence_trend,
                        mode='lines+markers',
                        name='–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞',
                        line=dict(color='blue', width=3),
                        marker=dict(size=8)
                    ))
                    
                    fig.update_layout(
                        title="–î–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞",
                        xaxis_title="–ù–æ–º–µ—Ä –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                        yaxis_title="–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å",
                        yaxis=dict(range=[0, 1]),
                        height=400
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–∏–∞–≥–Ω–æ–∑–∞—Ö
                    diagnoses = [r.structured_findings.get("diagnosis", {}).get("primary_diagnosis", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω") for r in results]
                    unique_diagnoses = len(set(diagnoses))
                    
                    if unique_diagnoses == 1:
                        st.success("‚úÖ –î–∏–∞–≥–Ω–æ–∑ —Å—Ç–∞–±–∏–ª–µ–Ω –≤–æ –≤—Å–µ—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö")
                    else:
                        st.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∏–∞–≥–Ω–æ–∑–∞—Ö ({unique_diagnoses} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö)")
                
                # –ò–ò-–∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é
                st.subheader("ü§ñ –ò–ò-–∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É")
                
                if st.button("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ"):
                    
                    with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è..."):
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        comparison_prompt = f"""
–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {len(results)} –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
–¢–∏–ø —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {comparison_type}

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
"""
                        
                        for i, result in enumerate(results, 1):
                            comparison_prompt += f"""
–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i} ({result.filename}):
- –¢–∏–ø: {result.detected_type.value}
- –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {result.confidence:.1%}
- –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏: {json.dumps(result.structured_findings, ensure_ascii=False, indent=2)}

"""
                        
                        comparison_prompt += f"""
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ, –≤–∫–ª—é—á–∞—é—â–µ–µ:

1. –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:
   - –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   - –°–æ–ø–æ—Å—Ç–∞–≤–∏–º–æ—Å—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
   - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

2. –ö–õ–ò–ù–ò–ß–ï–°–ö–ò–ï –ù–ê–•–û–î–ö–ò:
   - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
   - –î–∏–Ω–∞–º–∏–∫–∞ –ø–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
   - –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∏ –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

3. –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –û–¶–ï–ù–ö–ê:
   - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–∞
   - –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
   - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)

4. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
   - –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
   - –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
   - –¢–∞–∫—Ç–∏–∫–∞ –≤–µ–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞

5. –ü–†–û–ì–ù–û–ó:
   - –û—Ü–µ–Ω–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏
   - –†–∏—Å–∫–∏ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã

–û—Ç–≤–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π—Ç–µ —á–µ—Ç–∫–æ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""
                        
                        try:
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                            comparative_analysis = analyzer._send_ai_request(
                                comparison_prompt, 
                                images[0],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –±–∞–∑–æ–≤–æ–µ
                                {"comparison_type": comparison_type, "images_count": len(results)}
                            )
                            
                            st.markdown(comparative_analysis)
                            
                            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
                            st.download_button(
                                label="üíæ –°–∫–∞—á–∞—Ç—å –∑–∞–∫–ª—é—á–µ–Ω–∏–µ",
                                data=comparative_analysis,
                                file_name=f"comparative_analysis_{comparison_type}_{len(results)}_images.txt",
                                mime="text/plain"
                            )
                            
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    elif uploaded_files and len(uploaded_files) == 1:
        st.warning("‚ö†Ô∏è –î–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    elif not uploaded_files:
        st.info("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")


def show_ai_training_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –ò–ò"""
    st.header("üéì –û–±—É—á–µ–Ω–∏–µ –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ò–ò")
    
    st.warning("‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    st.info("""
    **–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:**
    
    üéØ **–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π:**
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    - –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –≤–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–∏
    
    üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:**
    - –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π  
    - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–º–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è–º–∏
    
    üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤:**
    - –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    
    üíæ **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:**
    - –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏
    """)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    
    if 'analysis_history' not in st.session_state:
        st.session_state.analysis_history = []
    
    if st.session_state.analysis_history:
        df = pd.DataFrame(st.session_state.analysis_history)
        st.dataframe(df)
    else:
        st.info("–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –ø—É—Å—Ç–∞")


def show_medical_protocols_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤"""
    st.header("üìö –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã")
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    protocol_category = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        [
            "–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è (–≠–ö–ì)",
            "–†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—è", 
            "–ù–µ–π—Ä–æ—Ä–∞–¥–∏–æ–ª–æ–≥–∏—è (–ú–†–¢/–ö–¢)",
            "–£–ó–ò –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
            "–≠–Ω–¥–æ—Å–∫–æ–ø–∏—è",
            "–û–Ω–∫–æ–ª–æ–≥–∏—è",
            "–ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞"
        ]
    )
    
    # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
    protocols = {
        "–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è (–≠–ö–ì)": {
            "–ê–Ω–∞–ª–∏–∑ –≠–ö–ì –ø—Ä–∏ –û–ö–°": {
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü—Ä–æ—Ç–æ–∫–æ–ª –∞–Ω–∞–ª–∏–∑–∞ –≠–ö–ì –ø—Ä–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –Ω–∞ –æ—Å—Ç—Ä—ã–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã–π —Å–∏–Ω–¥—Ä–æ–º",
                "–∫–ª—é—á–µ–≤—ã–µ_—Ç–æ—á–∫–∏": [
                    "–≠–ª–µ–≤–∞—Ü–∏—è ST > 1 –º–º –≤ –¥–≤—É—Ö —Å–º–µ–∂–Ω—ã—Ö –æ—Ç–≤–µ–¥–µ–Ω–∏—è—Ö",
                    "–î–µ–ø—Ä–µ—Å—Å–∏—è ST > 0.5 –º–º",
                    "–ò–Ω–≤–µ—Ä—Å–∏—è –∑—É–±—Ü–∞ T –≤ –¥–≤—É—Ö —Å–º–µ–∂–Ω—ã—Ö –æ—Ç–≤–µ–¥–µ–Ω–∏—è—Ö",
                    "–ü–æ—è–≤–ª–µ–Ω–∏–µ –∑—É–±—Ü–∞ Q"
                ],
                "–∫–æ–¥_–º–∫–±": ["I21", "I20"],
                "—Å—Ä–æ—á–Ω–æ—Å—Ç—å": "—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ"
            },
            "–ù–∞—Ä—É—à–µ–Ω–∏—è —Ä–∏—Ç–º–∞": {
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—Ä–∏—Ç–º–∏–π –ø–æ –≠–ö–ì",
                "–∫–ª—é—á–µ–≤—ã–µ_—Ç–æ—á–∫–∏": [
                    "–ß–°–° > 100 - —Ç–∞—Ö–∏–∫–∞—Ä–¥–∏—è",
                    "–ß–°–° < 60 - –±—Ä–∞–¥–∏–∫–∞—Ä–¥–∏—è",
                    "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ P –≤–æ–ª–Ω - —Ñ–∏–±—Ä–∏–ª–ª—è—Ü–∏—è –ø—Ä–µ–¥—Å–µ—Ä–¥–∏–π",
                    "QRS > 120 –º—Å - –±–ª–æ–∫–∞–¥–∞ –Ω–æ–∂–µ–∫ –ø—É—á–∫–∞ –ì–∏—Å–∞"
                ],
                "–∫–æ–¥_–º–∫–±": ["I47", "I48", "I49"],
                "—Å—Ä–æ—á–Ω–æ—Å—Ç—å": "—Å—Ä–æ—á–Ω–æ"
            }
        },
        
        "–†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—è": {
            "–ü–Ω–µ–≤–º–æ–Ω–∏—è": {
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–Ω–µ–≤–º–æ–Ω–∏–∏",
                "–∫–ª—é—á–µ–≤—ã–µ_—Ç–æ—á–∫–∏": [
                    "–ò–Ω—Ñ–∏–ª—å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª–µ–≥–æ—á–Ω–æ–π –ø–∞—Ä–µ–Ω—Ö–∏–º–µ",
                    "–í–æ–∑–¥—É—à–Ω–∞—è –±—Ä–æ–Ω—Ö–æ–≥—Ä–∞–º–º–∞",
                    "–†–µ–∞–∫—Ü–∏—è –ø–ª–µ–≤—Ä—ã",
                    "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–∏–∫–æ—Ä–Ω–µ–≤—ã—Ö –ª–∏–º—Ñ–æ—É–∑–ª–æ–≤"
                ],
                "–∫–æ–¥_–º–∫–±": ["J12", "J13", "J14", "J15", "J16", "J18"],
                "—Å—Ä–æ—á–Ω–æ—Å—Ç—å": "—Å—Ä–æ—á–Ω–æ"
            },
            "–ü–Ω–µ–≤–º–æ—Ç–æ—Ä–∞–∫—Å": {
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–Ω–µ–≤–º–æ—Ç–æ—Ä–∞–∫—Å–∞",
                "–∫–ª—é—á–µ–≤—ã–µ_—Ç–æ—á–∫–∏": [
                    "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–µ–≥–æ—á–Ω–æ–≥–æ —Ä–∏—Å—É–Ω–∫–∞",
                    "–ì—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–∂–∞—Ç–æ–≥–æ –ª–µ–≥–∫–æ–≥–æ",
                    "–°–º–µ—â–µ–Ω–∏–µ —Å—Ä–µ–¥–æ—Å—Ç–µ–Ω–∏—è (–ø—Ä–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ–º)",
                    "–£—Ä–æ–≤–µ–Ω—å –∂–∏–¥–∫–æ—Å—Ç–∏ (–ø—Ä–∏ –≥–µ–º–æ–ø–Ω–µ–≤–º–æ—Ç–æ—Ä–∞–∫—Å–µ)"
                ],
                "–∫–æ–¥_–º–∫–±": ["J93"],
                "—Å—Ä–æ—á–Ω–æ—Å—Ç—å": "—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ"
            }
        }
    }
    
    if protocol_category in protocols:
        selected_protocols = protocols[protocol_category]
        
        for protocol_name, protocol_data in selected_protocols.items():
            with st.expander(f"üìã {protocol_name}", expanded=False):
                
                st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {protocol_data['–æ–ø–∏—Å–∞–Ω–∏–µ']}")
                
                urgency_color = {
                    "—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ": "red",
                    "—Å—Ä–æ—á–Ω–æ": "orange", 
                    "–ø–ª–∞–Ω–æ–≤–æ": "green"
                }.get(protocol_data['—Å—Ä–æ—á–Ω–æ—Å—Ç—å'], "gray")
                
                st.markdown(f"**–°—Ä–æ—á–Ω–æ—Å—Ç—å:** :{urgency_color}[{protocol_data['—Å—Ä–æ—á–Ω–æ—Å—Ç—å']}]")
                
                st.markdown("**–ö–ª—é—á–µ–≤—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:**")
                for point in protocol_data['–∫–ª—é—á–µ–≤—ã–µ_—Ç–æ—á–∫–∏']:
                    st.markdown(f"‚Ä¢ {point}")
                
                st.markdown(f"**–ö–æ–¥—ã –ú–ö–ë-10:** {', '.join(protocol_data['–∫–æ–¥_–º–∫–±'])}")
    
    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª")
    
    with st.form("custom_protocol"):
        custom_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
        custom_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
        custom_criteria = st.text_area("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ)")
        custom_icd = st.text_input("–ö–æ–¥—ã –ú–ö–ë-10 (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
        custom_urgency = st.selectbox("–£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏", ["–ø–ª–∞–Ω–æ–≤–æ", "—Å—Ä–æ—á–Ω–æ", "—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ"])
        
        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª"):
            if custom_name and custom_description:
                st.success(f"‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª '{custom_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            else:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
def integrate_with_main_app():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
    
    enhanced_pages = [
        "üî¨ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑",
        "üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
        "üéì –û–±—É—á–µ–Ω–∏–µ –ò–ò",
        "üìö –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã"
    ]
    
    page_functions = {
        "üî¨ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑": show_enhanced_analysis_page,
        "üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑": show_comparative_analysis_page,
        "üéì –û–±—É—á–µ–Ω–∏–µ –ò–ò": show_ai_training_page,
        "üìö –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã": show_medical_protocols_page
    }
    
    return enhanced_pages, page_functions


if __name__ == "__main__":
    st.set_page_config(page_title="Enhanced Medical AI", layout="wide")
    
    test_page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É", [
        "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
        "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
        "–û–±—É—á–µ–Ω–∏–µ –ò–ò",
        "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã"
    ])
    
    if test_page == "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        show_enhanced_analysis_page()
    elif test_page == "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        show_comparative_analysis_page()
    elif test_page == "–û–±—É—á–µ–Ω–∏–µ –ò–ò":
        show_ai_training_page()
    elif test_page == "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã":
        show_medical_protocols_page()