from config import ASSEMBLYAI_API_KEY
# assemblyai_transcriber.py
import assemblyai as aai

def transcribe_audio_assemblyai(audio_file, api_key):
    """
    –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ AssemblyAI —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –≥–æ–≤–æ—Ä—è—â–∏—Ö
    """
    try:
        aai.settings.api_key = api_key

        config = aai.TranscriptionConfig(
            speaker_labels=True,
            language_code="ru",
            speech_model=aai.SpeechModel.best,
            punctuate=True,
            format_text=True,
            disfluencies=False
        )

        transcriber = aai.Transcriber()
        transcript = transcriber.transcribe(audio_file, config)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        if transcript.status == aai.TranscriptStatus.error:
            return f"‚ùå –û—à–∏–±–∫–∞ AssemblyAI: {transcript.error}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        if not isinstance(transcript, aai.Transcript):
            return "‚ùå –û—à–∏–±–∫–∞: transcript –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º Transcript"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ utterances
        if not isinstance(transcript.utterances, list):
            return "‚ùå –û—à–∏–±–∫–∞: utterances –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º"

        result = "üéôÔ∏è **–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞**\n\n"
        for utterance in transcript.utterances:
            result += f"**{utterance.speaker}**: {utterance.text}\n\n"

        return result

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ AssemblyAI: {str(e)}"