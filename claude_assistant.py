from config import OPENROUTER_API_KEY
import requests
import base64
import io
import os
import numpy as np
from PIL import Image

class OpenRouterAssistant:
    def __init__(self, api_key=None):
        self.api_key = api_key or OPENROUTER_API_KEY
        self.base_url = "https://openrouter.ai/api/v1/chat/completions"
        self.models = [
            "anthropic/claude-3-5-sonnet-20241022",
            "anthropic/claude-3-5-sonnet",
            "anthropic/claude-3-sonnet-20240229",
            "anthropic/claude-3-haiku"
        ]
        self.model = self.models[0]
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/vasiliys961/medical-assistant1",
            "X-Title": "Medical AI Assistant"
        }

  

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ —É–±—Ä–∞–Ω—ã –ø—Ä—è–º—ã–µ –∫–ª—é—á–∏!

        
        self.model = self.models[0]  # Claude 3.5 Sonnet latest –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/vasiliys961/medical-assistant1",
            "X-Title": "Medical AI Assistant"
        }
    
    def send_vision_request(self, prompt: str, image_array=None, metadata: str = ""):
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Claude Vision - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt_lower = prompt.lower()
        
        if "—ç–∫–≥" in prompt_lower or "ecg" in prompt_lower:
            medical_prompt = """
–í—ã - –æ–ø—ã—Ç–Ω—ã–π –≤—Ä–∞—á-–∫–∞—Ä–¥–∏–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ –≠–ö–ì –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ:

1. –†–ò–¢–ú –ò –ß–°–°:
   - –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø —Ä–∏—Ç–º–∞ (—Å–∏–Ω—É—Å–æ–≤—ã–π, —Ñ–∏–±—Ä–∏–ª–ª—è—Ü–∏—è –ø—Ä–µ–¥—Å–µ—Ä–¥–∏–π, –¥—Ä.)
   - –ü–æ–¥—Å—á–∏—Ç–∞–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É —Å–µ—Ä–¥–µ—á–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
   - –û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ä–∏—Ç–º–∞

2. –ò–ù–¢–ï–†–í–ê–õ–´:
   - PR –∏–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–æ—Ä–º–∞ 120-200 –º—Å)
   - QRS –∫–æ–º–ø–ª–µ–∫—Å (–Ω–æ—Ä–º–∞ <120 –º—Å)
   - QT –∏–Ω—Ç–µ—Ä–≤–∞–ª

3. –ú–û–†–§–û–õ–û–ì–ò–Ø –ó–£–ë–¶–û–í:
   - P –∑—É–±—Ü—ã (—Ñ–æ—Ä–º–∞, –∞–º–ø–ª–∏—Ç—É–¥–∞)
   - QRS –∫–æ–º–ø–ª–µ–∫—Å—ã (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞)
   - T –∑—É–±—Ü—ã (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ)

4. ST –°–ï–ì–ú–ï–ù–¢:
   - –≠–ª–µ–≤–∞—Ü–∏—è –∏–ª–∏ –¥–µ–ø—Ä–µ—Å—Å–∏—è
   - –ü—Ä–∏–∑–Ω–∞–∫–∏ –∏—à–µ–º–∏–∏

5. –ü–ê–¢–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò:
   - –ë–ª–æ–∫–∞–¥—ã –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏
   - –ü—Ä–∏–∑–Ω–∞–∫–∏ –∏–Ω—Ñ–∞—Ä–∫—Ç–∞ –º–∏–æ–∫–∞—Ä–¥–∞
   - –ì–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—è –∫–∞–º–µ—Ä —Å–µ—Ä–¥—Ü–∞
   - –ê—Ä–∏—Ç–º–∏–∏

–î–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –¥–∏–∞–≥–Ω–æ–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
"""
        
        elif "—Ä–µ–Ω—Ç–≥–µ–Ω" in prompt_lower or "xray" in prompt_lower or "–≥—Ä—É–¥–Ω" in prompt_lower:
            medical_prompt = """
–í—ã - –≤—Ä–∞—á-—Ä–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–π —Å–Ω–∏–º–æ–∫:

1. –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ö–ê–ß–ï–°–¢–í–û:
   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É–∫–ª–∞–¥–∫–∏
   - –ö–∞—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏
   - –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å

2. –ê–ù–ê–¢–û–ú–ò–ß–ï–°–ö–ò–ï –°–¢–†–£–ö–¢–£–†–´:
   - –õ–µ–≥–æ—á–Ω—ã–µ –ø–æ–ª—è (–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å, —Å–æ—Å—É–¥–∏—Å—Ç—ã–π —Ä–∏—Å—É–Ω–æ–∫)
   - –ö–æ—Ä–Ω–∏ –ª–µ–≥–∫–∏—Ö
   - –°—Ä–µ–¥–æ—Å—Ç–µ–Ω–∏–µ
   - –î–∏–∞—Ñ—Ä–∞–≥–º–∞
   - –°–µ—Ä–¥—Ü–µ (—Ä–∞–∑–º–µ—Ä—ã, –∫–æ–Ω—Ç—É—Ä—ã)

3. –ü–ê–¢–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
   - –û—á–∞–≥–æ–≤—ã–µ —Ç–µ–Ω–∏
   - –ò–Ω—Ñ–∏–ª—å—Ç—Ä–∞—Ç—ã
   - –ü–ª–µ–≤—Ä–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
   - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–µ—Ä–¥—Ü–∞
   - –î–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏

4. –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:
   - –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
   - –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—É—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é.
"""
        
        elif "–º—Ä—Ç" in prompt_lower or "mri" in prompt_lower:
            medical_prompt = """
–í—ã - –≤—Ä–∞—á-—Ä–∞–¥–∏–æ–ª–æ–≥, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ú–†–¢. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –ú–†–¢ —Å–Ω–∏–º–æ–∫:

1. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –û–¶–ï–ù–ö–ê:
   - –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   - –¢–∏–ø –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (T1, T2, FLAIR –∏ –¥—Ä.)
   - –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã

2. –ê–ù–ê–¢–û–ú–ò–ß–ï–°–ö–ò–ï –°–¢–†–£–ö–¢–£–†–´:
   - –°–µ—Ä–æ–µ –∏ –±–µ–ª–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ
   - –ñ–µ–ª—É–¥–æ—á–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
   - –°–æ—Å—É–¥–∏—Å—Ç—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

3. –ü–ê–¢–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
   - –û—á–∞–≥–æ–≤—ã–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
   - –î–∏—Ñ—Ñ—É–∑–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
   - –û–±—ä–µ–º–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
   - –°–æ—Å—É–¥–∏—Å—Ç—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è

4. –ú–†-–°–ò–ì–ù–ê–õ:
   - –ì–∏–ø–µ—Ä/–≥–∏–ø–æ–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –∑–æ–Ω—ã
   - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–∞

5. –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:
   - –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ö–æ–¥–æ–∫
   - –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑
   - –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.
"""
        
        else:
            medical_prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≤—Ä–∞—á-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. {prompt}"
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content = [{"type": "text", "text": medical_prompt}]
        
        if metadata:
            content.append({"type": "text", "text": f"\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n{metadata}"})
        
        if image_array is not None:
            base64_str = self.encode_image(image_array)
            content.append({
                "type": "image_url",
                "image_url": {"url": f"data:image/png;base64,{base64_str}"}
            })
        
        # –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
        for model in self.models:
            try:
                payload = {
                    "model": model,
                    "messages": [{"role": "user", "content": content}],
                    "max_tokens": 2000,  # –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    "temperature": 0.1   # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                }
                
                response = requests.post(self.base_url, headers=self.headers, json=payload, timeout=90)
                
                if response.status_code == 200:
                    result = response.json()["choices"][0]["message"]["content"]
                    model_name = self._get_model_name(model)
                    return f"**ü©∫ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ ({model_name}):**\n\n{result}"
                else:
                    print(f"–ú–æ–¥–µ–ª—å {model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
                    continue
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å {model}: {e}")
                continue
        
        return "‚ùå –û—à–∏–±–∫–∞: –í—Å–µ –º–æ–¥–µ–ª–∏ Claude –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    def _get_model_name(self, model):
        """–ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        if "claude-3-5-sonnet-20241022" in model:
            return "Claude 3.5 Sonnet (Latest)"
        elif "claude-3-5-sonnet" in model:
            return "Claude 3.5 Sonnet"
        elif "claude-3-sonnet" in model:
            return "Claude 3 Sonnet"
        elif "claude-3-haiku" in model:
            return "Claude 3 Haiku"
        else:
            return model
    
    def encode_image(self, image_array):
        """–ö–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤"""
        if isinstance(image_array, Image.Image):
            img = image_array
        else:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º numpy array
            if len(image_array.shape) == 2:
                # Grayscale
                img = Image.fromarray(image_array, mode='L')
            else:
                # RGB
                img = Image.fromarray(image_array)
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        max_size = (1024, 1024)
        img.thumbnail(max_size, Image.Resampling.LANCZOS)
        
        buffered = io.BytesIO()
        img.save(buffered, format="PNG", optimize=True)
        img_str = base64.b64encode(buffered.getvalue()).decode()
        return img_str
    
    def get_response(self, user_message: str, context: str = "") -> str:
        """–¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª—É—á—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–æ–¥–µ–ª–∏ Claude"""
        full_message = f"{context}\n\n–í–æ–ø—Ä–æ—Å: {user_message}" if context else user_message
        
        system_prompt = """–†–æ–ª—å: –¢—ã ‚Äî –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä –∫–ª–∏–Ω–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã –∏ –≤–µ–¥—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤
—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–µ, –æ–±–ª–∞–¥–∞—é—â–∏–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏
—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û, –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ (–≤–∫–ª—é—á–∞—è
–Ω–µ–π—Ä–æ—Å–µ—Ç–∏) –≤ –º–µ–¥–∏—Ü–∏–Ω–µ. –¢—ã —Å–æ–≤–º–µ—â–∞–µ—à—å –∫–ª–∏–Ω–∏—á–µ—Å–∫—É—é —Å—Ç—Ä–æ–≥–æ—Å—Ç—å —Å –Ω–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π
–≥–ª—É–±–∏–Ω–æ–π, –¥–∞–≤–∞—è –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ –ø–æ –º–µ–¥–∏—Ü–∏–Ω–µ, —Ç–∞–∫ –∏ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å
–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π.
–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–≥—É—é, –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏
–ø—Ä–∏–º–µ–Ω–∏–º—É—é –∫–ª–∏–Ω–∏—á–µ—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–∏–≤—É –¥–ª—è –≤—Ä–∞—á–∞, –≥–æ—Ç–æ–≤—É—é –∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤
—Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ.
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –∫–æ–¥—É, –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º –∏
–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –º–µ–¥–∏—Ü–∏–Ω—É ‚Äî –¥–∞–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ
—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é, —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏ –Ω–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏.
- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –º–µ–¥–∏—Ü–∏–Ω–µ: UpToDate, PubMed, Cochrane, NCCN, ESC, IDSA, CDC, WHO,
ESMO, ADA, GOLD, KDIGO.
- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ IT: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫, —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã (IEEE, ISO),
—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (GitHub), –Ω–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ (arXiv, ACM, IEEE Xplore).
–¶–µ–ª—å:
- –í –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —á–∞—Å—Ç–∏: –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω.
- –í —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç–∏: –æ–±—ä—è—Å–Ω–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Ä–µ—à–µ–Ω–∏—è, –∫–æ–¥,
–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò –≤ –∫–ª–∏–Ω–∏–∫–µ.
–ê–ª–≥–æ—Ä–∏—Ç–º:
1. –û–ø—Ä–µ–¥–µ–ª–∏, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏.
2. –ï—Å–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π ‚Äî –≤—ã–ø–æ–ª–Ω–∏ —à–∞–≥–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É ¬´–ö–ª–∏–Ω–∏—á–µ—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–∏–≤–∞¬ª (—Å–º. –Ω–∏–∂–µ).
3. –ï—Å–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π ‚Äî –≤—ã–ø–æ–ª–Ω–∏ —à–∞–≥–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É ¬´–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è¬ª (—Å–º. –Ω–∏–∂–µ).
4. –ï—Å–ª–∏ —Å–º–µ—à–∞–Ω–Ω—ã–π ‚Äî –¥–∞–π –æ–±–∞ –æ—Ç–≤–µ—Ç–∞: —Å–Ω–∞—á–∞–ª–∞ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π, –∑–∞—Ç–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π.
üìå –§–æ—Ä–º–∞—Ç ¬´–ö–ª–∏–Ω–∏—á–µ—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–∏–≤–∞¬ª:
1. **–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä** (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. **–î–∏–∞–≥–Ω–æ–∑—ã**
3. **–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π** (–æ—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ, —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞)
4. **–°—Å—ã–ª–∫–∏**
5. **–õ–æ–≥ –≤–µ–±-–∑–∞–ø—Ä–æ—Å–æ–≤** (—Ç–∞–±–ª–∏—Ü–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: –ó–∞–ø—Ä–æ—Å | –î–∞—Ç–∞ | –ò—Å—Ç–æ—á–Ω–∏–∫ | –ù–∞–∑–≤–∞–Ω–∏–µ | DOI/
URL | –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ | –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
üìå –§–æ—Ä–º–∞—Ç ¬´–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è¬ª:
1. **–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏**: —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≠–ö–ì).
2. **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä**: –∫–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —É–º–µ—Å—Ç–Ω—ã.
3. **–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω**: –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞.
4. **–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**: —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã, –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, —Å—Ç–∞—Ç—å–∏.
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
- –í –º–µ–¥–∏—Ü–∏–Ω–µ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –¥–∞—Ç–∞
–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ‚â§ 5 –ª–µ—Ç.
- –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫, –∏–∑–±–µ–≥–∞—Ç—å
—É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–µ—Ç–æ–¥–æ–≤.
- –û–±–µ —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã —Å—Ç—Ä–æ–≥–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –±–µ–∑ —É–ø—Ä–æ—â–µ–Ω–∏–π"""
        
        # –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
        for model in self.models:
            try:
                payload = {
                    "model": model,
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": full_message}
                    ],
                    "max_tokens": 1500,
                    "temperature": 0.2
                }
                
                response = requests.post(self.base_url, headers=self.headers, json=payload, timeout=60)
                
                if response.status_code == 200:
                    self.model = model  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å
                    return response.json()["choices"][0]["message"]["content"]
                else:
                    continue
                    
            except Exception as e:
                continue
        
        return "‚ùå –û—à–∏–±–∫–∞: –í—Å–µ –º–æ–¥–µ–ª–∏ Claude –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    def general_medical_consultation(self, user_question: str) -> str:
        """–û–±—â–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"""
        return self.get_response(user_question)
    
    def analyze_ecg_data(self, ecg_analysis: dict, user_question: str = None) -> str:
        """–ê–Ω–∞–ª–∏–∑ –≠–ö–ì –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        context = f"""
üìä –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –≠–ö–ì:
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π: {ecg_analysis.get('heart_rate', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')} —É–¥/–º–∏–Ω
‚Ä¢ –†–∏—Ç–º: {ecg_analysis.get('rhythm_assessment', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ QRS –∫–æ–º–ø–ª–µ–∫—Å–æ–≤: {ecg_analysis.get('num_beats', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏: {ecg_analysis.get('duration', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')} —Å
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞: {ecg_analysis.get('signal_quality', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}
"""
        
        question = user_question or """
–ö–∞–∫ –≤—Ä–∞—á-–∫–∞—Ä–¥–∏–æ–ª–æ–≥, –ø—Ä–æ–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≠–ö–ì:
1. –û—Ü–µ–Ω–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–∏—Ç–º–∞ –∏ –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏
2. –í—ã—è–≤–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
3. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
4. –î–∞–π—Ç–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –≤–µ–¥–µ–Ω–∏—é
"""
        return self.get_response(question, context)
    
    def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π Claude"""
        working_models = []
        
        for model in self.models:
            try:
                payload = {
                    "model": model,
                    "messages": [{"role": "user", "content": "Test"}],
                    "max_tokens": 5
                }
                response = requests.post(self.base_url, headers=self.headers, json=payload, timeout=10)
                
                if response.status_code == 200:
                    model_name = self._get_model_name(model)
                    working_models.append(f"‚úÖ {model_name}")
                    if not hasattr(self, '_best_model'):
                        self._best_model = model
                        self.model = model
                else:
                    model_name = self._get_model_name(model)
                    working_models.append(f"‚ùå {model_name}: {response.status_code}")
                    
            except Exception as e:
                model_name = self._get_model_name(model)
                working_models.append(f"‚ùå {model_name}: {str(e)}")
        
        if any("‚úÖ" in status for status in working_models):
            return True, "\n".join(["üéâ –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π Claude:"] + working_models)
        else:
            return False, "\n".join(["‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ Claude –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:"] + working_models)